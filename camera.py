# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Hust_project.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtGui
import PyQt5.QtWidgets
from PyQt5.QtGui import QPixmap
import sys
import cv2
from PyQt5.QtCore import pyqtSignal, Qt, QThread
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
import color_detect as cd
import mask

class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)
    def __init__(self):
        super().__init__()
        self._run_flag = False

    def stop(self): 
        self._run_flag = True

    def run(self):
        # capture from web cam
        cap = cv2.VideoCapture(0)
        while True:
            ret, cv_img = cap.read()
            hsv = cv2.cvtColor(cv_img,cv2.COLOR_BGR2HSV)
            red = mask.rmask(hsv)
            green = mask.gmask(hsv)
            blue = mask.bmask(hsv)
            cd.getContour(red, cv_img,(0,0,255),"red")
            cd.getContour(green, cv_img,(0,255,0),"green")
            cd.getContour(blue, cv_img,(255,0,0),"blue")
            if ret:
                self.change_pixmap_signal.emit(cv_img)
            if self._run_flag :
                self._run_flag = False
                break
        cap.release()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(280, 370, 241, 91))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")

        self.horizontalLayout = QtWidgets.QHBoxLayout(self.verticalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.startButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.startButton.setObjectName("startButton")
        self.horizontalLayout.addWidget(self.startButton)

        self.stopButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.stopButton.setObjectName("stopButton")
        self.horizontalLayout.addWidget(self.stopButton)

        self.camera_label = QtWidgets.QLabel(self.centralwidget)
        self.camera_label.setGeometry(QtCore.QRect(370, 30, 421, 311))
        self.camera_label.setObjectName("camera_label")

        self.info_label = QtWidgets.QLabel(self.centralwidget)
        self.info_label.setGeometry(QtCore.QRect(10, 30, 341, 311))
        self.info_label.setObjectName("info_label")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")


        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.thread = VideoThread()
        self.thread.change_pixmap_signal.connect(self.update_image)

        self.retranslateUi(MainWindow)
        # start the video
        self.startButton.clicked.connect(self.thread.start) 
        # Stop the camera
        self.stopButton.clicked.connect(self.thread.stop) # type: ignore
        self.startButton.clicked.connect(self.update_log) # type: ignore
        self.stopButton.clicked.connect(self.info_label.clear) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def startCam(self):
        
        # connect its signal to the update_image slot
        
        # start the thread
        self.thread.start()

    def update_log(self):
        pass
        
    def update_image(self, cv_img):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt(cv_img)
        self.camera_label.setPixmap(qt_img)
    
    def convert_cv_qt(self, cv_img):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(421, 311, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.startButton.setText(_translate("MainWindow", "START"))
        self.stopButton.setText(_translate("MainWindow", "STOP"))
        self.camera_label.setText(_translate("MainWindow", "CAMERA OUTPUT"))
        self.info_label.setText(_translate("MainWindow", "Info Log"))


import sys
app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
MainWindow.show()
sys.exit(app.exec_())
